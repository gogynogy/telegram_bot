from aiogram import types, executor, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
import sqlite3, logging, time


with sqlite3.connect("arugamObmen.db") as arugamDB:
    sql = arugamDB.cursor()
    table = """CREATE TABLE IF NOT EXISTS obmen (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    dateRegistration TEXT,
    dateStartWork TEXT,
    customerTelegram TEXT,
    customerPhone TEXT,
    customer TEXT,
    exchangeGroup TEXT,
    adminTelegram TEXT,
    adminEmpty TEXT,
    exchengeStart TEXT,
    waletStart TEXT,
    summStart TEXT,
    exchangeFinish TEXT,
    course TEXT,
    summFinish TEXT,
    moneyFrom TEXT,
    costOfUSDT TEXT,
    summUSDT TEXT,
    plusUSDT TEXT,
    memberTelegram TEXT,
    memberEmpty TEXT,
    agentTelegram TEXT,
    agentEmpty TEXT,
    agentCommisionUSDT TEXT,
    memberCommisionUSDT TEXT,
    dateOfTakeCash TEXT,
    paymentMethod TEXT,
    agent TEXT,
    statusInWork TEXT NOT NULL DEFAULT no,
    statusDone TEXT NOT NULL DEFAULT no,
    statusMoney TEXT NOT NULL DEFAULT no
    )"""
    sql.executescript(table)


logging.basicConfig(level=logging.INFO)
TOKEN = "5533152676:AAH4669tRwabkln6f9j3uBScO3DzV2qh9JY"
bot = Bot(token=TOKEN)
dispatcher = Dispatcher(bot)
cb = CallbackData("id", "action")


id_gosha = 498332094
id_egor = 215007307
id_pasha = 1640800598
id_vania = 79994399


def location(target):#  –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ —Ä–∞–∑–Ω—ã–º –ª–æ–∫–∞—Ü–∏—è–º
    if target.lower() == "arugam":
        return id_gosha
    elif target.lower() == "trinko":
        return id_gosha


def createSQL(text):#  —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∑–∞–ø–∏—Å–∏
    values = (time.asctime(), text[0], text[1], text[3], text[2], text[5], text[8], text[7], text[9], "+")
    sql.execute(f"INSERT INTO obmen (dateRegistration, customerTelegram, exchangeGroup, "
                f"exchengeStart, summStart, course, summFinish, "
                f"exchangeFinish, paymentMethod, statusInWork)"
                f" VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", values)
    arugamDB.commit()
    return sql.lastrowid

async def SendMessege(target, text, message, exchangeNum):
    await bot.send_message(target, f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ ‚Ññ {exchangeNum}\n–ö–ª–∏–µ–Ω—Ç: {text[0]}\n"
                                   f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–¥–µ–ª–∫–∏: {text[2]} {text[3]} @ {text[5]} = {text[7]} {text[8]}\n"
                                   f"–ü–ª–∞–Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç —Å–¥–µ–ª–∫–∏: –•YI USDT"
                                   f"–ê–≥–µ–Ω—Ç: <–£–ö–ê–ó–ê–¢–¨>  # (–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞, –Ω–∞–∂–∏–º–∞—è –≤—ã—Ö–æ–¥–∏—à—å –Ω–∞ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –ø–æ —É–∫–∞–∑–∞–Ω–∏—é –∞–≥–µ–Ω—Ç–∞, –º–æ–∂–Ω–æ —Å –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞)"
                                   f"–ê–≥–µ–Ω—Ç: –ù–ò–ö (–ø–ª–∞–Ω–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è –•–•–•–• USDT)")  # , reply_markup=markup)
    # button = types.InlineKeyboardButton(text="–õ–∞–π–∫–Ω—É—Ç—å", callback_data=cb.new(id=exchangeNum))


async def SendMessegeAnswer(target, message, exchangeNum, text):
    await bot.send_message(message.chat.id, f" –ò–Ω—Ñ–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏: {exchangeNum}\nC–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {target}"
                                            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")





@dispatcher.message_handler(commands=["start"])
async def begin(message: types.Message):
    if message.chat.id == id_egor or message.chat.id == id_gosha:
        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É üëã", callback_data="NewSdelka")
        button2 = InlineKeyboardButton("–∂–æ–ø–∞", callback_data="button2")
        markup.add(button1, button2)
        await bot.send_message(message.chat.id, f"–ø—Ä–∏–≤–µ—Ç. —Ç—Ä—É–¥—è–≥–∏", reply_markup=markup)
    else:
        await bot.send_message(message.chat.id, f"—Ç–µ–∫—Å—Ç –ø—Ä–æ —Ç–æ, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç")

@dispatcher.callback_query_handler(lambda c: c.data == "NewSdelka")
async def reakcia_na_knopku(call: types.callback_query):
    text = ['@–ö–ª–∏–µ–Ω—Ç', '–ª–æ–∫–∞—Ü–∏—è', '—Å—É–º–º–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –≤–∞–ª—é—Ç–µ', '—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–∞–ª—é—Ç–∞', '@', '–∫—É—Ä—Å', '=', '—Å—É–º–º–∞ –æ–±–º–µ–Ω–∞',
            '–≤–∞–ª—é—Ç–∞ –æ–±–º–µ–Ω–∞', '—Å–ø–æ—Å–æ–± –ø–ª–∞—Ç–µ–∂–∞', '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']
    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("–∫–ª–∏–µ–Ω—Ç", callback_data="createClient")
    button2 = InlineKeyboardButton("–ª–æ–∫–∞—Ü–∏—è", callback_data="button1")
    button3 = InlineKeyboardButton("—Å—Ç–∞—Ä—Ç —Å—É–º–º", callback_data="button1")
    button4 = InlineKeyboardButton("—Å—Ç–∞—Ä—Ç –≤–∞–ª—é—Ç–∞", callback_data="button1")
    button5 = InlineKeyboardButton("–∫—É—Ä—Å", callback_data="button1")
    button6 = InlineKeyboardButton("—Å—É–º–º–∞ –æ–±–º–µ–Ω–∞", callback_data="button1")
    button7 = InlineKeyboardButton("–≤–∞–ª—é—Ç–∞ –æ–±–º–µ–Ω–∞", callback_data="button1")
    button8 = InlineKeyboardButton("—Å–ø–æ—Å–æ–± –ø–ª–∞—Ç–µ–∂–∞", callback_data="button1")
    button9 = InlineKeyboardButton("–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", callback_data="button1")
    button10 = InlineKeyboardButton("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="button1")
    markup.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)

    await bot.answer_callback_query(call.id)
    await bot.send_message(call.message.chat.id, text, reply_markup=markup)


@dispatcher.message_handler(content_types="text")
async def text(message: types.Message):
    text = message.text.split(" ")  # @Bombambaley arugam 20000 rur @ 5.6 = 112000 lkr binance
    print(text)
    if message.chat.id == id_egor or message.chat.id == id_gosha:
        if message.chat.id == id_egor or message.chat.id == id_gosha:# try:
            if text[2].isdigit() and text[7].isdigit():
                target = location(text[1])
                exchangeNum = createSQL(text)
                await SendMessege(target, text, message, exchangeNum)
                await SendMessegeAnswer(target, message, exchangeNum, text)
            else:
                await bot.send_message(message.chat.id, f"–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {text}")
        else:
            await bot.send_message(message.chat.id, f"–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {text}")
    else:
        if text[0].startswith("@"):
            try:
                await bot.send_message(id_egor, f"–ø–µ—Ä–µ–≤–æ–¥ –ø–æ –æ–±–º–µ–Ω—É –¥–ª—è {text[0]}\n"
                                                f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –±–∏–Ω–∞–Ω—Å: {text[1]} {text[2]}")
                sql.execute(f"INSERT INTO")
                await bot.send_message(message.chat.id, "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –ø—Ä–∏–Ω—è—Ç–∞")
            except:
                await bot.send_message(message.chat.id, "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: @example 420 usdt")
        elif text[0].lower().startswith("–∑–∞—è–≤–∫–∞"):
            await bot.send_message(id_egor, message.text)
            await bot.send_message(message.chat.id, "–∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        elif text[0].lower() == "–ø–æ–∫–∞":
            await bot.send_message(message.chat.id, f"–ø–æ–∫–∞ {message.chat.first_name}")
        elif text[0].isdigit():
            num = message.text
            print(num)
            await bot.send_message(message.chat.id, "–æ–ø–∞, —Ü–∏—Ñ—Ä—ã")
            # await bot.send_message(id_gosha, f"@{message.chat.username} {message.chat.id}") #–ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–Ω–µ –≤ –ª–∏—á–∫—É id
            # await bot.send_message(message.chat.id, "–∞ —è —Ç–≤–æ–π –∞–π–¥–∏—à–Ω–∏–∫ —Å–ø–∏–∑–¥–∏–ª)")
            with open("jay_bob.mp4", "rb") as vidos:
                await message.reply_video(video=vidos)
        elif text[0].isalpha():
            text = message.text
            print(text)
            await bot.send_message(message.chat.id, "–æ–ø–∞, –±—É–∫–≤—ã")
            with open("jay_bob.mp4", "rb") as vidos:
                await message.reply_video(video=vidos)
            await bot.send_message(id_gosha, f"@{message.chat.username} {text}")

# @dispatcher.callback_query_handler(cb.filter(item_name="startExchange"))
# async def callbacks_num_change_fab(call: types.CallbackQuery, callback_data: dict):
#     print("dsgvs")


executor.start_polling(dispatcher, skip_updates=True)